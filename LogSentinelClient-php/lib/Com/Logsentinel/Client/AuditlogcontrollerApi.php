<?php
/**
 * AuditlogcontrollerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LogSentinel RESTful API
 *
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Com\Logsentinel\Client;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * AuditlogcontrollerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditlogcontrollerApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AuditlogcontrollerApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation logAuthActionUsingPOST
     *
     * Log an authentication event with the option to pass actor public key and signature
     *
     * @param string $actor_id actorId (required)
     * @param string $auth_action authAction (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $user_id userId (optional)
     * @param string $authorization Authorization (optional)
     * @param string $signed_login_challenge Signed-Login-Challenge (optional)
     * @param string $user_public_key User-Public-Key (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse
     */
    public function logAuthActionUsingPOST($actor_id, $auth_action, $details, $application_id, $user_id = null, $authorization = null, $signed_login_challenge = null, $user_public_key = null, $actor_display_name = null, $actor_roles = null)
    {
        list($response) = $this->logAuthActionUsingPOSTWithHttpInfo($actor_id, $auth_action, $details, $application_id, $user_id, $authorization, $signed_login_challenge, $user_public_key, $actor_display_name, $actor_roles);
        return $response;
    }

    /**
     * Operation logAuthActionUsingPOSTWithHttpInfo
     *
     * Log an authentication event with the option to pass actor public key and signature
     *
     * @param string $actor_id actorId (required)
     * @param string $auth_action authAction (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $user_id userId (optional)
     * @param string $authorization Authorization (optional)
     * @param string $signed_login_challenge Signed-Login-Challenge (optional)
     * @param string $user_public_key User-Public-Key (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function logAuthActionUsingPOSTWithHttpInfo($actor_id, $auth_action, $details, $application_id, $user_id = null, $authorization = null, $signed_login_challenge = null, $user_public_key = null, $actor_display_name = null, $actor_roles = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling logAuthActionUsingPOST');
        }
        // verify the required parameter 'auth_action' is set
        if ($auth_action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $auth_action when calling logAuthActionUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling logAuthActionUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling logAuthActionUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/log/{actorId}/auth/{authAction}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_roles !== null) {
            $queryParams['actorRoles'] = $this->apiClient->getSerializer()->toQueryValue($actor_roles);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // header params
        if ($signed_login_challenge !== null) {
            $headerParams['Signed-Login-Challenge'] = $this->apiClient->getSerializer()->toHeaderValue($signed_login_challenge);
        }
        // header params
        if ($user_public_key !== null) {
            $headerParams['User-Public-Key'] = $this->apiClient->getSerializer()->toHeaderValue($user_public_key);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($auth_action !== null) {
            $resourcePath = str_replace(
                "{" . "authAction" . "}",
                $this->apiClient->getSerializer()->toPathValue($auth_action),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse',
                '/api/log/{actorId}/auth/{authAction}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation logSimpleUsingPOST
     *
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     *
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse
     */
    public function logSimpleUsingPOST($details, $application_id, $authorization = null)
    {
        list($response) = $this->logSimpleUsingPOSTWithHttpInfo($details, $application_id, $authorization);
        return $response;
    }

    /**
     * Operation logSimpleUsingPOSTWithHttpInfo
     *
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted
     *
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function logSimpleUsingPOSTWithHttpInfo($details, $application_id, $authorization = null)
    {
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling logSimpleUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling logSimpleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/log/simple";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse',
                '/api/log/simple'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation logStandardActionUsingPOST
     *
     * Log an event by providing full details
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $entity_type entityType (required)
     * @param string $entity_id entityId (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse
     */
    public function logStandardActionUsingPOST($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $authorization = null, $actor_display_name = null, $actor_roles = null)
    {
        list($response) = $this->logStandardActionUsingPOSTWithHttpInfo($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $authorization, $actor_display_name, $actor_roles);
        return $response;
    }

    /**
     * Operation logStandardActionUsingPOSTWithHttpInfo
     *
     * Log an event by providing full details
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $entity_type entityType (required)
     * @param string $entity_id entityId (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function logStandardActionUsingPOSTWithHttpInfo($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $authorization = null, $actor_display_name = null, $actor_roles = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling logStandardActionUsingPOST');
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling logStandardActionUsingPOST');
        }
        // verify the required parameter 'entity_type' is set
        if ($entity_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_type when calling logStandardActionUsingPOST');
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling logStandardActionUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling logStandardActionUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling logStandardActionUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/log/{actorId}/{action}/{entityType}/{entityId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_roles !== null) {
            $queryParams['actorRoles'] = $this->apiClient->getSerializer()->toQueryValue($actor_roles);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }
        // path params
        if ($entity_type !== null) {
            $resourcePath = str_replace(
                "{" . "entityType" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_type),
                $resourcePath
            );
        }
        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse',
                '/api/log/{actorId}/{action}/{entityType}/{entityId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation logUsingPOST
     *
     * Log an event by a given actor
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse
     */
    public function logUsingPOST($actor_id, $action, $details, $application_id, $authorization = null, $actor_display_name = null, $actor_roles = null)
    {
        list($response) = $this->logUsingPOSTWithHttpInfo($actor_id, $action, $details, $application_id, $authorization, $actor_display_name, $actor_roles);
        return $response;
    }

    /**
     * Operation logUsingPOSTWithHttpInfo
     *
     * Log an event by a given actor
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_roles actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\LogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function logUsingPOSTWithHttpInfo($actor_id, $action, $details, $application_id, $authorization = null, $actor_display_name = null, $actor_roles = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling logUsingPOST');
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling logUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling logUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling logUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/log/{actorId}/{action}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_roles !== null) {
            $queryParams['actorRoles'] = $this->apiClient->getSerializer()->toQueryValue($actor_roles);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse',
                '/api/log/{actorId}/{action}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\LogResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation searchUsingGET
     *
     * Search logged entries
     *
     * @param string $query query (required)
     * @param int $start_time startTime (required)
     * @param int $end_time endTime (required)
     * @param int $page page (required)
     * @param int $page_size pageSize (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\AuditLogEntry[]
     */
    public function searchUsingGET($query, $start_time, $end_time, $page, $page_size, $application_id, $authorization = null)
    {
        list($response) = $this->searchUsingGETWithHttpInfo($query, $start_time, $end_time, $page, $page_size, $application_id, $authorization);
        return $response;
    }

    /**
     * Operation searchUsingGETWithHttpInfo
     *
     * Search logged entries
     *
     * @param string $query query (required)
     * @param int $start_time startTime (required)
     * @param int $end_time endTime (required)
     * @param int $page page (required)
     * @param int $page_size pageSize (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\AuditLogEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingGETWithHttpInfo($query, $start_time, $end_time, $page, $page_size, $application_id, $authorization = null)
    {
        // verify the required parameter 'query' is set
        if ($query === null) {
            throw new \InvalidArgumentException('Missing the required parameter $query when calling searchUsingGET');
        }
        // verify the required parameter 'start_time' is set
        if ($start_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start_time when calling searchUsingGET');
        }
        // verify the required parameter 'end_time' is set
        if ($end_time === null) {
            throw new \InvalidArgumentException('Missing the required parameter $end_time when calling searchUsingGET');
        }
        // verify the required parameter 'page' is set
        if ($page === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page when calling searchUsingGET');
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_size when calling searchUsingGET');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling searchUsingGET');
        }
        // parse inputs
        $resourcePath = "/api/search";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($query !== null) {
            $queryParams['query'] = $this->apiClient->getSerializer()->toQueryValue($query);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['startTime'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }
        // query params
        if ($end_time !== null) {
            $queryParams['endTime'] = $this->apiClient->getSerializer()->toQueryValue($end_time);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\AuditLogEntry[]',
                '/api/search'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\AuditLogEntry[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\AuditLogEntry[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation verifyUsingPOST
     *
     * Verify whether a given hash is present, indicating that the log is intact
     *
     * @param string $hash hash (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Com\Logsentinel\Client\Model\Verification
     */
    public function verifyUsingPOST($hash, $application_id, $authorization = null)
    {
        list($response) = $this->verifyUsingPOSTWithHttpInfo($hash, $application_id, $authorization);
        return $response;
    }

    /**
     * Operation verifyUsingPOSTWithHttpInfo
     *
     * Verify whether a given hash is present, indicating that the log is intact
     *
     * @param string $hash hash (required)
     * @param string $application_id Application-Id (required)
     * @param string $authorization Authorization (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Com\Logsentinel\Client\Model\Verification, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyUsingPOSTWithHttpInfo($hash, $application_id, $authorization = null)
    {
        // verify the required parameter 'hash' is set
        if ($hash === null) {
            throw new \InvalidArgumentException('Missing the required parameter $hash when calling verifyUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling verifyUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/verify";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($hash !== null) {
            $queryParams['hash'] = $this->apiClient->getSerializer()->toQueryValue($hash);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Com\Logsentinel\Client\Model\Verification',
                '/api/verify'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Com\Logsentinel\Client\Model\Verification', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Com\Logsentinel\Client\Model\Verification', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
