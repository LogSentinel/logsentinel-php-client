<?php
/**
 * HashcontrollerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * LogSentinel RESTful API
 *
 * Read more at https://logsentinel.com/docs
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Com\Logsentinel\Client;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * HashcontrollerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HashcontrollerApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return HashcontrollerApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getHashableContentForAuthActionUsingPOST
     *
     * Get the hash of a request for auth actions
     *
     * @param string $actor_id actorId (required)
     * @param string $auth_action authAction (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $user_id userId (optional)
     * @param string $signed_login_challenge Signed-Login-Challenge (optional)
     * @param string $user_public_key User-Public-Key (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getHashableContentForAuthActionUsingPOST($actor_id, $auth_action, $details, $application_id, $user_id = null, $signed_login_challenge = null, $user_public_key = null, $actor_display_name = null, $actor_role = null)
    {
        list($response) = $this->getHashableContentForAuthActionUsingPOSTWithHttpInfo($actor_id, $auth_action, $details, $application_id, $user_id, $signed_login_challenge, $user_public_key, $actor_display_name, $actor_role);
        return $response;
    }

    /**
     * Operation getHashableContentForAuthActionUsingPOSTWithHttpInfo
     *
     * Get the hash of a request for auth actions
     *
     * @param string $actor_id actorId (required)
     * @param string $auth_action authAction (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $user_id userId (optional)
     * @param string $signed_login_challenge Signed-Login-Challenge (optional)
     * @param string $user_public_key User-Public-Key (optional)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHashableContentForAuthActionUsingPOSTWithHttpInfo($actor_id, $auth_action, $details, $application_id, $user_id = null, $signed_login_challenge = null, $user_public_key = null, $actor_display_name = null, $actor_role = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling getHashableContentForAuthActionUsingPOST');
        }
        // verify the required parameter 'auth_action' is set
        if ($auth_action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $auth_action when calling getHashableContentForAuthActionUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling getHashableContentForAuthActionUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling getHashableContentForAuthActionUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/getHashableContent/{actorId}/auth/{authAction}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', '*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }
        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_role !== null) {
            $queryParams['actorRole'] = $this->apiClient->getSerializer()->toQueryValue($actor_role);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // header params
        if ($signed_login_challenge !== null) {
            $headerParams['Signed-Login-Challenge'] = $this->apiClient->getSerializer()->toHeaderValue($signed_login_challenge);
        }
        // header params
        if ($user_public_key !== null) {
            $headerParams['User-Public-Key'] = $this->apiClient->getSerializer()->toHeaderValue($user_public_key);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($auth_action !== null) {
            $resourcePath = str_replace(
                "{" . "authAction" . "}",
                $this->apiClient->getSerializer()->toPathValue($auth_action),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/getHashableContent/{actorId}/auth/{authAction}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getHashableContentForStandardActionUsingPOST
     *
     * Get the hash of a request for standard actions
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $entity_type entityType (required)
     * @param string $entity_id entityId (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getHashableContentForStandardActionUsingPOST($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $actor_display_name = null, $actor_role = null)
    {
        list($response) = $this->getHashableContentForStandardActionUsingPOSTWithHttpInfo($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $actor_display_name, $actor_role);
        return $response;
    }

    /**
     * Operation getHashableContentForStandardActionUsingPOSTWithHttpInfo
     *
     * Get the hash of a request for standard actions
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $entity_type entityType (required)
     * @param string $entity_id entityId (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHashableContentForStandardActionUsingPOSTWithHttpInfo($actor_id, $action, $entity_type, $entity_id, $details, $application_id, $actor_display_name = null, $actor_role = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling getHashableContentForStandardActionUsingPOST');
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling getHashableContentForStandardActionUsingPOST');
        }
        // verify the required parameter 'entity_type' is set
        if ($entity_type === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_type when calling getHashableContentForStandardActionUsingPOST');
        }
        // verify the required parameter 'entity_id' is set
        if ($entity_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $entity_id when calling getHashableContentForStandardActionUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling getHashableContentForStandardActionUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling getHashableContentForStandardActionUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/getHashableContent/{actorId}/{action}/{entityType}/{entityId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', '*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_role !== null) {
            $queryParams['actorRole'] = $this->apiClient->getSerializer()->toQueryValue($actor_role);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }
        // path params
        if ($entity_type !== null) {
            $resourcePath = str_replace(
                "{" . "entityType" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_type),
                $resourcePath
            );
        }
        // path params
        if ($entity_id !== null) {
            $resourcePath = str_replace(
                "{" . "entityId" . "}",
                $this->apiClient->getSerializer()->toPathValue($entity_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/getHashableContent/{actorId}/{action}/{entityType}/{entityId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getHashableContentSimpleUsingPOST
     *
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     *
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getHashableContentSimpleUsingPOST($details, $application_id)
    {
        list($response) = $this->getHashableContentSimpleUsingPOSTWithHttpInfo($details, $application_id);
        return $response;
    }

    /**
     * Operation getHashableContentSimpleUsingPOSTWithHttpInfo
     *
     * Get the hash of a request without any additional metadata (including encrypted request bodies)
     *
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHashableContentSimpleUsingPOSTWithHttpInfo($details, $application_id)
    {
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling getHashableContentSimpleUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling getHashableContentSimpleUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/getHashableContent";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/xml', 'application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/getHashableContent'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getHashableContentUsingPOST
     *
     * Get the hash of a request for simple (minimial metadata) actions
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getHashableContentUsingPOST($actor_id, $action, $details, $application_id, $actor_display_name = null, $actor_role = null)
    {
        list($response) = $this->getHashableContentUsingPOSTWithHttpInfo($actor_id, $action, $details, $application_id, $actor_display_name, $actor_role);
        return $response;
    }

    /**
     * Operation getHashableContentUsingPOSTWithHttpInfo
     *
     * Get the hash of a request for simple (minimial metadata) actions
     *
     * @param string $actor_id actorId (required)
     * @param string $action action (required)
     * @param string $details details (required)
     * @param string $application_id Application-Id (required)
     * @param string $actor_display_name actorDisplayName (optional)
     * @param string $actor_role actorRole (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHashableContentUsingPOSTWithHttpInfo($actor_id, $action, $details, $application_id, $actor_display_name = null, $actor_role = null)
    {
        // verify the required parameter 'actor_id' is set
        if ($actor_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $actor_id when calling getHashableContentUsingPOST');
        }
        // verify the required parameter 'action' is set
        if ($action === null) {
            throw new \InvalidArgumentException('Missing the required parameter $action when calling getHashableContentUsingPOST');
        }
        // verify the required parameter 'details' is set
        if ($details === null) {
            throw new \InvalidArgumentException('Missing the required parameter $details when calling getHashableContentUsingPOST');
        }
        // verify the required parameter 'application_id' is set
        if ($application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $application_id when calling getHashableContentUsingPOST');
        }
        // parse inputs
        $resourcePath = "/api/getHashableContent/{actorId}/{action}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', '*/*']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', '*/*']);

        // query params
        if ($actor_display_name !== null) {
            $queryParams['actorDisplayName'] = $this->apiClient->getSerializer()->toQueryValue($actor_display_name);
        }
        // query params
        if ($actor_role !== null) {
            $queryParams['actorRole'] = $this->apiClient->getSerializer()->toQueryValue($actor_role);
        }
        // header params
        if ($application_id !== null) {
            $headerParams['Application-Id'] = $this->apiClient->getSerializer()->toHeaderValue($application_id);
        }
        // path params
        if ($actor_id !== null) {
            $resourcePath = str_replace(
                "{" . "actorId" . "}",
                $this->apiClient->getSerializer()->toPathValue($actor_id),
                $resourcePath
            );
        }
        // path params
        if ($action !== null) {
            $resourcePath = str_replace(
                "{" . "action" . "}",
                $this->apiClient->getSerializer()->toPathValue($action),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($details)) {
            $_tempBody = $details;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/api/getHashableContent/{actorId}/{action}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
